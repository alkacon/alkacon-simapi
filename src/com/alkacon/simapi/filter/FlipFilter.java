/* * Copyright (C) Jerry Huxtable 1998 */package com.alkacon.simapi.filter;import java.awt.image.*;public class FlipFilter extends ImageFilter {	public static final int FLIP_H = 1;	public static final int FLIP_V = 2;	public static final int FLIP_HV = 3;	public static final int FLIP_90CW = 4;	public static final int FLIP_90CCW = 5;	public static final int FLIP_180 = 6;	private int operation;	private int width, height;	private int newWidth, newHeight;	public FlipFilter() {		this(FLIP_HV);	}	public FlipFilter(int operation) {		this.operation = operation;	}    public void setHints(int hintflags) {	    hintflags &= ~TOPDOWNLEFTRIGHT;		consumer.setHints(hintflags);	}	public void setDimensions(int width, int height) {		this.width = width;		this.height = height;		switch (operation) {		case FLIP_H:		case FLIP_V:		case FLIP_180:			newWidth = width;			newHeight = height;			break;		case FLIP_HV:		case FLIP_90CW:		case FLIP_90CCW:			newWidth = height;			newHeight = width;			break;		}		consumer.setDimensions(newWidth, newHeight);	}	public void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize) {		int newX = x;		int newY = y;		int newW = w;		int newH = h;		switch (operation) {		case FLIP_H:			newX = width - (x + w);			break;		case FLIP_V:			newY = height - (y + h);			break;		case FLIP_HV:			newW = h;			newH = w;			newX = y;			newY = x;			break;		case FLIP_90CW:			newW = h;			newH = w;			newX = height - (y + h);			newY = x;			break;		case FLIP_90CCW:			newW = h;			newH = w;			newX = y;			newY = width - (x + w);			break;		case FLIP_180:			newX = width - (x + w);			newY = height - (y + h);			break;		}		byte[] newPixels = new byte[newW * newH];		for (int row = 0; row < h; row++) {			for (int col = 0; col < w; col++) {				int index = row * scansize + off + col;				int newRow = row;				int newCol = col;				switch (operation) {				case FLIP_H:					newCol = w - col - 1;					break;				case FLIP_V:					newRow = h - row - 1;					break;				case FLIP_HV:					newRow = col;					newCol = row;					break;				case FLIP_90CW:					newRow = col;					newCol = h - row - 1;;					break;				case FLIP_90CCW:					newRow = w - col - 1;					newCol = row;					break;				case FLIP_180:					newRow = h - row - 1;					newCol = w - col - 1;					break;				}				int newIndex = newRow * newW + newCol;				newPixels[newIndex] = pixels[index];			}		}		consumer.setPixels(newX, newY, newW, newH, model, newPixels, 0, newW);	}	public void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize) {		int newX = x;		int newY = y;		int newW = w;		int newH = h;		switch (operation) {		case FLIP_H:			newX = width - (x + w);			break;		case FLIP_V:			newY = height - (y + h);			break;		case FLIP_HV:			newW = h;			newH = w;			newX = y;			newY = x;			break;		case FLIP_90CW:			newW = h;			newH = w;			newX = height - (y + h);			newY = x;			break;		case FLIP_90CCW:			newW = h;			newH = w;			newX = y;			newY = width - (x + w);			break;		case FLIP_180:			newX = width - (x + w);			newY = height - (y + h);			break;		}		int[] newPixels = new int[newW * newH];		for (int row = 0; row < h; row++) {			for (int col = 0; col < w; col++) {				int index = row * scansize + off + col;				int newRow = row;				int newCol = col;				switch (operation) {				case FLIP_H:					newCol = w - col - 1;					break;				case FLIP_V:					newRow = h - row - 1;					break;				case FLIP_HV:					newRow = col;					newCol = row;					break;				case FLIP_90CW:					newRow = col;					newCol = h - row - 1;;					break;				case FLIP_90CCW:					newRow = w - col - 1;					newCol = row;					break;				case FLIP_180:					newRow = h - row - 1;					newCol = w - col - 1;					break;				}				int newIndex = newRow * newW + newCol;				newPixels[newIndex] = pixels[index];			}		}		consumer.setPixels(newX, newY, newW, newH, model, newPixels, 0, newW);	}	public String toString() {		switch (operation) {		case FLIP_H:			return "Flip Horizontal";		case FLIP_V:			return "Flip Vertical";		case FLIP_HV:			return "Flip Diagonal";		case FLIP_90CW:			return "Rotate 90";		case FLIP_90CCW:			return "Rotate -90";		case FLIP_180:			return "Rotate 180";		}		return "Flip";	}}